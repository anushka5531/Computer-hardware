// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems",
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Not(in=instruction[5],out=notd1);
    And(a=notd1,b=instruction[15],out=and1);
    And(a=instruction[3],b=and1,out=writeM);
    
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=out1);
    Not(in=instruction[15],out=notop);
    Or(a=notop,b=instruction[5],out=outi);
    ARegister(in=out1,load=outi,out=Aout);
    And16(a=Aout,b=Aout,out[0..14]=addressM);

    And(a=instruction[15],b=instruction[4],out=and3);
    DRegister(in=ALUout,load=and3,out=Dregister);
    
    Mux16(a=Aout,b=inM,sel=instruction[12],out=muxout);

    ALU(x=Dregister,y=muxout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=zr,ng=ng);
    And16(a=ALUout,b=ALUout,out=outM);

    Not(in=zr,out=nzr);
    Not(in=ng,out=nng);
    And(a=nng,b=nzr,out=nzrng);
    And(a=instruction[0],b=nzrng,out=one);
    And(a=instruction[1],b=zr,out=two);
    And(a=instruction[0],b=instruction[1],out=hh);
    And(a=instruction[2],b=ng,out=four);
    Or(a=one,b=two,out=or1);
    Or(a=or1,b=four,out=lod1);
    And(a=lod1,b=instruction[15],out=lod);
    PC(in=Aout,load=lod,inc=true,reset=reset,out[0..14]=pc);
}
